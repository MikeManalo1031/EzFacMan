package EzFacMan;

import ParseSVGData.SVGParser;
import databaseTables.*;

import java.awt.Color;
import static java.awt.Color.blue;
import static java.awt.Color.white;
import java.awt.event.WindowEvent;
import javax.swing.JFileChooser;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Desktop;
import java.awt.Graphics;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * User Interface class for EZ-Fac program.
 *
 * @author Mike Manalo
 * @author Nathan Jack
 * @author Nick Killion
 * @author Ali
 */
public class EZFacUI extends javax.swing.JFrame {

    File selectedFile = null;
    File csvCurFile = null;
    public ArrayList<String> allcampuses = new ArrayList<String>();
    private ArrayList<String> allbuildings = new ArrayList<>();
    private ArrayList<String> allfloors = new ArrayList<String>();
    public static String dBuilding;
    public static String dCampus;
    public static String dFloor;
    floors f = floorsManager.displayAllfloors();
    campus c = campusManager.displayAllCampuses();
    building b = buildingManager.displayAllBuildings();
    String roomColor = "49F41E";
    
    /**
     * Creates new form NewJFrame
     *
     * @throws java.sql.SQLException Error in the SQL statement
     * @throws java.lang.ClassNotFoundException
     */
    public EZFacUI() throws SQLException, ClassNotFoundException {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass()
                .getResource("/Images/CornerIcon.png")));
        allfloors.addAll(f.getAllFloors());
        allcampuses.addAll(c.getAllcampuses());
        allbuildings.addAll(b.getAllbuildings());

        for (String s : allfloors) {
            floorDropdown.addItem(s);
        }
        for (String s : allcampuses) {
            campusDropdown.addItem(s);
        }
        for (String s : allbuildings) {
            buildingDropdown.addItem(s);
        }
        buildingDropdown.setEnabled(false);
        floorDropdown.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomPopUp = new javax.swing.JFrame();
        roomInfoPopup = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        roomTypedes = new javax.swing.JLabel();
        roomFOAPALName = new javax.swing.JLabel();
        roomFOAPAL = new javax.swing.JLabel();
        roomNumber = new javax.swing.JLabel();
        roomFloor = new javax.swing.JLabel();
        roomBuildingName = new javax.swing.JLabel();
        roomCampus = new javax.swing.JLabel();
        selectColorButton = new javax.swing.JButton();
        campusCode = new javax.swing.JTextField();
        buildingName = new javax.swing.JTextField();
        floorName = new javax.swing.JTextField();
        roomNum = new javax.swing.JTextField();
        departmentCode = new javax.swing.JTextField();
        departmentName = new javax.swing.JTextField();
        roomType = new javax.swing.JTextField();
        roomArea = new javax.swing.JTextField();
        updateChange = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        commentBox = new javax.swing.JTextArea();
        colorPanel = new javax.swing.JPanel();
        deptColorChooser = new javax.swing.JColorChooser();
        pdfMapChooser = new javax.swing.JFileChooser();
        addNewMapFrame = new javax.swing.JFrame();
        addMapPDF = new javax.swing.JButton();
        addMapCSV = new javax.swing.JButton();
        cautionLabel = new javax.swing.JLabel();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        pdfName = new javax.swing.JLabel();
        csvName = new javax.swing.JLabel();
        csvMapChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        mapDisplay = new EzFacMan.MapPanel();
        campusDropdown = new javax.swing.JComboBox();
        campusLabel = new javax.swing.JLabel();
        buildingLabel = new javax.swing.JLabel();
        buildingDropdown = new javax.swing.JComboBox();
        floorLabel = new javax.swing.JLabel();
        floorDropdown = new javax.swing.JComboBox();
        showMap = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        menuBar = new javax.swing.JMenuBar();
        fileButton = new javax.swing.JMenu();
        addNewMap = new javax.swing.JMenuItem();
        quitButton = new javax.swing.JMenuItem();
        settingsButton = new javax.swing.JMenu();
        modDeptColor = new javax.swing.JMenuItem();
        resetDeptColors = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        helpButton = new javax.swing.JMenu();
        userManualButton = new javax.swing.JMenuItem();
        aboutButton = new javax.swing.JMenuItem();

        roomPopUp.setMinimumSize(new java.awt.Dimension(450, 420));
        roomPopUp.setPreferredSize(new java.awt.Dimension(450, 420));

        roomInfoPopup.setMinimumSize(new java.awt.Dimension(275, 225));

        javax.swing.GroupLayout roomInfoPopupLayout = new javax.swing.GroupLayout(roomInfoPopup);
        roomInfoPopup.setLayout(roomInfoPopupLayout);
        roomInfoPopupLayout.setHorizontalGroup(
            roomInfoPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        roomInfoPopupLayout.setVerticalGroup(
            roomInfoPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel5.setText("Room Area: ");

        roomTypedes.setText("Room Type: ");

        roomFOAPALName.setText("FOAPAL Name: ");

        roomFOAPAL.setText("FOAPAL: ");

        roomNumber.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        roomNumber.setText("Room Number: ");

        roomFloor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        roomFloor.setText("Floor: ");

        roomBuildingName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        roomBuildingName.setText("Building Name: ");

        roomCampus.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        roomCampus.setText("Campus: ");

        selectColorButton.setText("Select Color");
        selectColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectColorButtonActionPerformed(evt);
            }
        });

        campusCode.setEditable(false);
        campusCode.setMinimumSize(new java.awt.Dimension(300, 25));
        campusCode.setPreferredSize(new java.awt.Dimension(180, 28));

        buildingName.setEditable(false);
        buildingName.setMinimumSize(new java.awt.Dimension(300, 25));

        floorName.setEditable(false);
        floorName.setMinimumSize(new java.awt.Dimension(300, 25));

        roomNum.setEditable(false);
        roomNum.setMinimumSize(new java.awt.Dimension(300, 25));
        roomNum.setPreferredSize(new java.awt.Dimension(180, 28));

        departmentCode.setMinimumSize(new java.awt.Dimension(300, 25));

        departmentName.setMinimumSize(new java.awt.Dimension(300, 25));

        roomType.setMinimumSize(new java.awt.Dimension(300, 25));

        roomArea.setMinimumSize(new java.awt.Dimension(300, 25));

        updateChange.setText("Update");
        updateChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateChangeActionPerformed(evt);
            }
        });

        Add.setText("Add");
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomDataActionPerformed(evt);
            }
        });

        jLabel1.setText("Comments");

        commentBox.setColumns(20);
        commentBox.setRows(5);
        commentBox.setMinimumSize(new java.awt.Dimension(300, 25));
        jScrollPane1.setViewportView(commentBox);

        colorPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout colorPanelLayout = new javax.swing.GroupLayout(colorPanel);
        colorPanel.setLayout(colorPanelLayout);
        colorPanelLayout.setHorizontalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 31, Short.MAX_VALUE)
        );
        colorPanelLayout.setVerticalGroup(
            colorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout roomPopUpLayout = new javax.swing.GroupLayout(roomPopUp.getContentPane());
        roomPopUp.getContentPane().setLayout(roomPopUpLayout);
        roomPopUpLayout.setHorizontalGroup(
            roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPopUpLayout.createSequentialGroup()
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(selectColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(colorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(59, 59, 59)
                        .addComponent(updateChange))
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addGap(430, 430, 430)
                        .addComponent(roomInfoPopup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(roomPopUpLayout.createSequentialGroup()
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(Add))
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomPopUpLayout.createSequentialGroup()
                                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(roomTypedes, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roomType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(roomArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(roomPopUpLayout.createSequentialGroup()
                                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(roomPopUpLayout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(roomBuildingName)
                                            .addComponent(roomCampus)))
                                    .addComponent(jLabel1)
                                    .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(roomFOAPALName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(roomNumber, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(roomFOAPAL)
                                    .addComponent(roomFloor, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(departmentCode, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(roomNum, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(floorName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(departmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(buildingName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(campusCode, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        roomPopUpLayout.setVerticalGroup(
            roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomPopUpLayout.createSequentialGroup()
                .addComponent(roomInfoPopup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCampus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campusCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(roomBuildingName))
                    .addGroup(roomPopUpLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildingName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(floorName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomFloor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomNum, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomNumber))
                .addGap(4, 4, 4)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentCode, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomFOAPAL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(roomFOAPALName)
                    .addComponent(departmentName, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomTypedes)
                    .addComponent(roomType, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(roomArea, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 19, Short.MAX_VALUE)
                .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(colorPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(roomPopUpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateChange)
                            .addComponent(Add)))
                    .addComponent(selectColorButton))
                .addContainerGap())
        );

        deptColorChooser.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        AbstractColorChooserPanel[] panels=deptColorChooser.getChooserPanels();
        for(AbstractColorChooserPanel p:panels){
            String displayName=p.getDisplayName();
            switch (displayName) {
                case "HSV":
                deptColorChooser.removeChooserPanel(p);
                break;
                case "HSL":
                deptColorChooser.removeChooserPanel(p);
                break;
                case "CMYK":
                deptColorChooser.removeChooserPanel(p);
                break;
            }
        }

        pdfMapChooser.removeChoosableFileFilter(pdfMapChooser.getAcceptAllFileFilter());
        FileNameExtensionFilter pdfFilter = new FileNameExtensionFilter("PDF", "pdf");
        pdfMapChooser.addChoosableFileFilter(pdfFilter);
        pdfMapChooser.setAccessory(addNewMap);
        pdfMapChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pdfMapChooserPropertyChange(evt);
            }
        });

        addNewMapFrame.setMinimumSize(new java.awt.Dimension(500, 400));
        addNewMapFrame.setLocationRelativeTo(null);

        addMapPDF.setText("Add a map (.pdf)");
        addMapPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMapPDFActionPerformed(evt);
            }
        });

        addMapCSV.setText("Add a spreadsheet (.csv)");
        addMapCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMapCSVActionPerformed(evt);
            }
        });

        cautionLabel.setText("Note: Make sure the map and spreadsheet correspond to the same floor");

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        csvName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout addNewMapFrameLayout = new javax.swing.GroupLayout(addNewMapFrame.getContentPane());
        addNewMapFrame.getContentPane().setLayout(addNewMapFrameLayout);
        addNewMapFrameLayout.setHorizontalGroup(
            addNewMapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewMapFrameLayout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(pdfName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(360, 360, 360))
            .addGroup(addNewMapFrameLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(cautionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(csvName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(341, 341, 341))
            .addGroup(addNewMapFrameLayout.createSequentialGroup()
                .addGroup(addNewMapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addNewMapFrameLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addGroup(addNewMapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addMapCSV, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addMapPDF, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(addNewMapFrameLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(importButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addNewMapFrameLayout.setVerticalGroup(
            addNewMapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addNewMapFrameLayout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(pdfName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addMapCSV)
                .addGap(18, 18, 18)
                .addComponent(addMapPDF)
                .addGap(23, 23, 23)
                .addComponent(cautionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(csvName)
                .addGap(18, 18, 18)
                .addGroup(addNewMapFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(importButton)
                    .addComponent(cancelButton))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        csvMapChooser.removeChoosableFileFilter(csvMapChooser.getAcceptAllFileFilter());
        FileNameExtensionFilter csvFilter = new FileNameExtensionFilter("CSV", "csv");
        csvMapChooser.addChoosableFileFilter(csvFilter);
        csvMapChooser.setAccessory(addNewMap);
        csvMapChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvMapChooserActionPerformed(evt);
            }
        });
        csvMapChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                csvMapChooserPropertyChange(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        mainPanel.setAlignmentY(3.0F);
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });

        mapDisplay.setAlignmentX(1.0F);
        mapDisplay.setAlignmentY(3.0F);
        mapDisplay.setPreferredSize(new java.awt.Dimension(1300, 700));

        javax.swing.GroupLayout mapDisplayLayout = new javax.swing.GroupLayout(mapDisplay);
        mapDisplay.setLayout(mapDisplayLayout);
        mapDisplayLayout.setHorizontalGroup(
            mapDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1300, Short.MAX_VALUE)
        );
        mapDisplayLayout.setVerticalGroup(
            mapDisplayLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 680, Short.MAX_VALUE)
        );

        campusDropdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campusDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campusDropdownActionPerformed(evt);
            }
        });

        campusLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        campusLabel.setText("Campus");

        buildingLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buildingLabel.setText("Building");

        buildingDropdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        buildingDropdown.setToolTipText("");
        buildingDropdown.setName(""); // NOI18N
        buildingDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingDropdownActionPerformed(evt);
            }
        });

        floorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        floorLabel.setText("Floor");

        floorDropdown.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        floorDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floorDropdownActionPerformed(evt);
            }
        });

        showMap.setText("Show Map");
        showMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(270, 270, 270)
                                .addComponent(campusLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(campusDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buildingLabel)
                                .addGap(18, 18, 18)
                                .addComponent(buildingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(floorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(showMap))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(mapDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campusDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(campusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buildingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buildingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(floorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showMap))
                .addGap(18, 18, 18)
                .addComponent(mapDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 680, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileButton.setText("File");

        addNewMap.setText("Add New Map");
        addNewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewMapActionPerformed(evt);
            }
        });
        fileButton.add(addNewMap);

        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        fileButton.add(quitButton);

        menuBar.add(fileButton);

        settingsButton.setText("Settings");

        modDeptColor.setText("Change Department Color");
        modDeptColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modDeptColorActionPerformed(evt);
            }
        });
        settingsButton.add(modDeptColor);

        resetDeptColors.setText("Revert to Default Colors");
        resetDeptColors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetDeptColorsActionPerformed(evt);
            }
        });
        settingsButton.add(resetDeptColors);

        menuBar.add(settingsButton);

        jMenu1.setText("Search");

        jMenuItem1.setText("by Room Number");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("by Comment");
        jMenu1.add(jMenuItem2);

        menuBar.add(jMenu1);

        helpButton.setText("Help");

        userManualButton.setText("User Manual");
        userManualButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userManualButtonActionPerformed(evt);
            }
        });
        helpButton.add(userManualButton);

        aboutButton.setText("About");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        helpButton.add(aboutButton);

        menuBar.add(helpButton);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void campusDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campusDropdownActionPerformed
        floorDropdown.setEnabled(false);
        // String sqlString = "'" + dCampus;

        if (campusDropdown.getSelectedItem() != null) {

            building bb = null;
            try {
                buildingDropdown.removeAllItems();

                bb = buildingManager.display(campusDropdown.getSelectedItem().toString());

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            allbuildings.removeAll(allbuildings);
            allbuildings.addAll(bb.getAllbuildings());

            for (String s : allbuildings) {
                buildingDropdown.addItem(s);

            }
            buildingDropdown.setEnabled(true);
            floorDropdown.setEnabled(false);

        }

    }//GEN-LAST:event_campusDropdownActionPerformed

    private void floorDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floorDropdownActionPerformed

        
    }//GEN-LAST:event_floorDropdownActionPerformed

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked


    }//GEN-LAST:event_mainPanelMouseClicked

    private void buildingDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingDropdownActionPerformed

        if (buildingDropdown.getSelectedItem() != null) {
            floors ff = null;
            try {
                floorDropdown.removeAllItems();

                ff = floorsManager.display(buildingDropdown.getSelectedItem().toString());

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            allfloors.removeAll(allfloors);
            allfloors.addAll(ff.getAllFloors());

            for (String s : allfloors) {
                floorDropdown.addItem(s);

            }

        }
        System.out.println(allfloors.toString());
        floorDropdown.setEnabled(true);
    }//GEN-LAST:event_buildingDropdownActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void resetDeptColorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetDeptColorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetDeptColorsActionPerformed

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        int q = JOptionPane.showConfirmDialog(null, "Are you sure?", "You are quiting the program!", JOptionPane.YES_NO_OPTION);

        if (q == 0) {
            System.exit(0);
        }

    }//GEN-LAST:event_quitButtonActionPerformed

    private void addNewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewMapActionPerformed
        addNewMapFrame.setVisible(true);
    }//GEN-LAST:event_addNewMapActionPerformed
    /**
     * Creates and opens new color chooser after user clicks on Modify
     * Department Color button.
     * <p>
     * Code adapted from:
     * http://www.java2s.com/Tutorial/Java/0240__Swing/RemovingaColorChooserPanelfromaJColorChooserDialog.htm.
     *
     * @param evt an event listener that listens for user to click on Modify
     * Department Color button
     */
    private void modDeptColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modDeptColorActionPerformed
        deptColorChooser = new javax.swing.JColorChooser();
        AbstractColorChooserPanel[] oldPanels = deptColorChooser.getChooserPanels();
        for (int i = 0; i < oldPanels.length; i++) {
            String clsName = oldPanels[i].getClass().getName();
            if (clsName.equals("javax.swing.colorchooser.DefaultRGBChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            } else if (clsName.equals("javax.swing.colorchooser.DefaultHSBChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            } else if (clsName.equals("javax.swing.colorchooser.DefaultHSYKChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            }
        }
        Color newColor = deptColorChooser.showDialog(this, "Choose a Department Color", white);
        System.out.println(newColor);
                

    }//GEN-LAST:event_modDeptColorActionPerformed
    /**
     * Opens the About .pdf using the desktop's default program.
     * <p>
     * Code adapted from: http://www.javabeat.net/java-open-word-document/
     *
     * @param evt listens for the user to click the About menu option
     */
    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed

        File aboutFile = null;
        String os = System.getProperty("os.name").toLowerCase();
        String workingDir = System.getProperty("user.dir");
        if (os.contains("win")) {
            aboutFile = new File(workingDir + "\\AboutEZFac.pdf");
        } else if (os.contains("mac")) {
            aboutFile = new File(workingDir + "/AboutEZFac.pdf");
        } else {
            JOptionPane.showMessageDialog(null, "Your Operating System is not supported!", "Error!", JOptionPane.OK_OPTION);
        }
        aboutFile.setReadOnly();
        try {
            //Open the file using Desktop class
            Desktop.getDesktop().open(aboutFile);
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }//GEN-LAST:event_aboutButtonActionPerformed

    /**
     * Opens the .pdf file chooser to select a new map.
     *
     * @param evt an event listener that is triggered when user clicks on button
     * to select .pdf.
     */
    private void addMapPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMapPDFActionPerformed
        try {
            // TODO add your handling code here:

            AddMap am = new AddMap();
            am.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addMapPDFActionPerformed
    /**
     * Opens the .csv file chooser to select a new spreadsheet.
     *
     * @param evt an event listener that is triggered when user clicks on button
     * to select .csv.
     */
    private void addMapCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMapCSVActionPerformed
        int returnVal2 = csvMapChooser.showOpenDialog(EZFacUI.this);
    }//GEN-LAST:event_addMapCSVActionPerformed

    private void csvMapChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvMapChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csvMapChooserActionPerformed

    /**
     * Checks that the user has selected a valid PDF and CSV and then triggers
     * the SVGParser to display the map on the screen.
     *
     * @param evt an event listener that is triggered when user clicks cancel on
     * the import button
     */
    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
//        PDFCustomFilter pdfFilter = new PDFCustomFilter();
//        if (pdfFilter.accept(selectedFile) != true) {
//            JOptionPane.showMessageDialog(null, "The file you selected is not a PDF", "Error!", JOptionPane.OK_OPTION);
//        }
        CSVCustomFilter csvFilter = new CSVCustomFilter();
        if (csvFilter.accept(csvCurFile) != true) {
            JOptionPane.showMessageDialog(null, "The file you selected is not a CSV", "Error!", JOptionPane.OK_OPTION);
        } else {
//            SVGParser parser = new SVGParser(selectedFile.getPath());
//            mapDisplay.setRoomList(parser.parse());
//            mapDisplay.setVisible(true);
//
//            Graphics g = mapDisplay.getGraphics();
//            g.setColor(Color.blue);
//            mapDisplay.repaint();

            insertCSVFile insertcsv = new insertCSVFile();
            //CSV file to database
            String csvFile = csvCurFile.getPath();
            try {
                insertcsv.insertCSV(csvFile);
            } catch (SQLException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed
    /**
     * Closes the addNewMapFrame dialog box.
     *
     * @param evt an event listener that is triggered when user clicks cancel on
     * addNewMapFrame dialog
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        addNewMapFrame.dispatchEvent(new WindowEvent(addNewMapFrame, WindowEvent.WINDOW_CLOSING));
        // pdfName.setText(null);
        //   csvName.setText(null);
    }//GEN-LAST:event_cancelButtonActionPerformed
    /**
     * Changes pdfName label to correspond with the name of the .pdf that user
     * previously selected.
     * <p>
     * Code adapted from:
     * http://stackoverflow.com/questions/8428548/java-jfilechooser-how-to-show-selected-file-in-a-textfield.
     *
     * @param evt an event listener that listens for a property change in the
     * pdfMapChooser
     */
    private void pdfMapChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pdfMapChooserPropertyChange

//        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
//            JFileChooser pdfMapChooser = (JFileChooser) evt.getSource();
//            File oldFile = (File) evt.getOldValue();
//            File newFile = (File) evt.getNewValue();
//
//            // The selected file should always be the same as newFile
//            File curFile = pdfMapChooser.getSelectedFile();
//            selectedFile = curFile;
//            pdfName.setText(curFile.getName());
//            pdfName.setForeground(blue);
//
//        } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(
//                evt.getPropertyName())) {
//            JFileChooser pdfMapChooser = (JFileChooser) evt.getSource();
//            File[] oldFiles = (File[]) evt.getOldValue();
//            File[] newFiles = (File[]) evt.getNewValue();
//
//            // Get list of selected files
//            // The selected files should always be the same as newFiles
//            File[] files = pdfMapChooser.getSelectedFiles();
//        }
    }//GEN-LAST:event_pdfMapChooserPropertyChange
    /**
     * Changes csvName label to correspond with the name of the .csv that user
     * previously selected.
     * <p>
     * Code adapted from:
     * http://stackoverflow.com/questions/8428548/java-jfilechooser-how-to-show-selected-file-in-a-textfield.
     *
     * @param evt an event listener that listens for a property change in the
     * csvMapChooser
     */
    private void csvMapChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_csvMapChooserPropertyChange
        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
            JFileChooser csvMapChooser = (JFileChooser) evt.getSource();
            File csvOldFile = (File) evt.getOldValue();
            File csvNewFile = (File) evt.getNewValue();
            csvCurFile = csvMapChooser.getSelectedFile();
            if (csvCurFile != null) {
                csvName.setText(csvCurFile.getName());
                csvName.setForeground(blue);
            }
        } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(
                evt.getPropertyName())) {
            JFileChooser csvMapChooser = (JFileChooser) evt.getSource();
            File[] csvOldFiles = (File[]) evt.getOldValue();
            File[] csvNewFiles = (File[]) evt.getNewValue();

            // Get list of selected files
            // The selected files should always be the same as newFiles
            File[] csvFiles = csvMapChooser.getSelectedFiles();
        }
    }//GEN-LAST:event_csvMapChooserPropertyChange
    /**
     * Opens the User Manual using the desktop's default program.
     * <p>
     * Code adapted from: http://www.javabeat.net/java-open-word-document/
     *
     * @param evt listens for the user to click the User Manual menu option
     */
    private void userManualButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userManualButtonActionPerformed

        File file = null;
        String os = System.getProperty("os.name").toLowerCase();
        String workingDir = System.getProperty("user.dir");
        if (os.contains("win")) {
            file = new File(workingDir + "\\UserManualV1.doc");

        } else if (os.contains("mac")) {
            file = new File(workingDir + "/UserManualV1.doc");
        } else {
            JOptionPane.showMessageDialog(null, "Your Operating System is not supported!", "Error!", JOptionPane.OK_OPTION);
        }
        file.setReadOnly();
        try {
            //Open the file using Desktop class
            Desktop.getDesktop().open(file);
        } catch (IOException exception) {
            exception.printStackTrace();
        }
    }//GEN-LAST:event_userManualButtonActionPerformed

    private void selectColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectColorButtonActionPerformed
        deptColorChooser = new javax.swing.JColorChooser();
        AbstractColorChooserPanel[] oldPanels = deptColorChooser.getChooserPanels();
        for (int i = 0; i < oldPanels.length; i++) {
            String clsName = oldPanels[i].getClass().getName();
            if (clsName.equals("javax.swing.colorchooser.DefaultRGBChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            } else if (clsName.equals("javax.swing.colorchooser.DefaultHSBChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            } else if (clsName.equals("javax.swing.colorchooser.DefaultHSYKChooserPanel")) {
                deptColorChooser.removeChooserPanel(oldPanels[i]);
            }
        }
        Color newColor = deptColorChooser.showDialog(this, "Choose a Department Color", white);
        roomColor =  String.format("%02x%02x%02x", newColor.getRed(), newColor.getGreen(), newColor.getBlue());
        colorPanel.setBackground(newColor);
    }//GEN-LAST:event_selectColorButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        SearchPanel S = null;
        try {
            S = new SearchPanel(this, this.mapDisplay);
        } catch (SQLException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            S.setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        S.setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void updateChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateChangeActionPerformed
        this.roomPopUp.dispose();
    //    RoomsManager.updateRoomInfo(roomNum.getText(), floorName.getText(), buildingName.getText(), departmentCode.getText(),
      //          departmentName.getText(), roomType.getText(), roomArea.getText());
     //   roomPopUp.repaint();
       
    }//GEN-LAST:event_updateChangeActionPerformed

    private void showMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMapActionPerformed

        String os = System.getProperty("os.name").toLowerCase();
        String workingDir = System.getProperty("user.dir");

        File fExist = new File(workingDir + "\\newtest38.svg");
        if (fExist.exists()) {
            fExist.delete();
        }        
        
        dCampus = (String) campusDropdown.getSelectedItem();
        dBuilding = (String) buildingDropdown.getSelectedItem();
        
        if (floorDropdown.getSelectedItem() != null) {
            floorsManager fm = new floorsManager();
            dFloor = floorDropdown.getSelectedItem().toString();
            dBuilding = buildingDropdown.getSelectedItem().toString();

            fm.getPDFData(buildingDropdown.getSelectedItem().toString(), floorDropdown.getSelectedItem().toString());
            SVGParser parser = new SVGParser(workingDir + "\\newtest38.pdf");
            mapDisplay.setRoomList(parser.parse());
            mapDisplay.setVisible(true);

            mapDisplay.repaint();
            mapDisplay.updateUI();
        }
       // jProgressBar1.
      
    }//GEN-LAST:event_showMapActionPerformed

    private void addRoomDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomDataActionPerformed
        try {
            // TODO add your handling code here:
            //      RoomsManager.addRoomInfo(String roomNum,
            //        String buildingCode, String floorName, String departmentCode,
            //      String departmentName, String roomType, String roomArea, String commentBox, String color) throws SQLException, ClassNotFoundException {
            int buildingCode = RoomsManager.buildingNametoCode(buildingName.getText());
            RoomsManager.addRoomInfo(roomNum.getText(), buildingCode, floorName.getText(), departmentCode.getText(),
                    departmentName.getText(), roomType.getText(), roomArea.getText(), roomColor, commentBox.getText());
            
        } catch (SQLException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        this.mapDisplay.repaint();
        this.mapDisplay.updateUI();
        this.roomPopUp.dispose();
    }//GEN-LAST:event_addRoomDataActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton Add;
    /**
    * The button to open the about page.
    */
    private javax.swing.JMenuItem aboutButton;
    /**
    * The button to launch the .csv file chooser.
    */
    private javax.swing.JButton addMapCSV;
    /**
    * The button to launch the .pdf file chooser.
    */
    private javax.swing.JButton addMapPDF;
    /**
    * The button to add a new map.
    */
    private javax.swing.JMenuItem addNewMap;
    /**
    * The frame to import a new map.
    */
    private javax.swing.JFrame addNewMapFrame;
    /**
    * This dropdown box selects a building to show on spreadsheet display.
    */
    public javax.swing.JComboBox buildingDropdown;
    /**
    * The label for the building selected from the dropdown box.
    */
    private javax.swing.JLabel buildingLabel;
    public javax.swing.JTextField buildingName;
    public javax.swing.JTextField campusCode;
    /**
    * This dropdown box selects a campus to show on spreadsheet display.
    */
    public javax.swing.JComboBox campusDropdown;
    /**
    * The label for the campus selected from the dropdown box.
    */
    private javax.swing.JLabel campusLabel;
    /**
    * The button to exit the import new map frame.
    */
    private javax.swing.JButton cancelButton;
    /**
    * The label that warns user to select files corresponding to same floor.
    */
    private javax.swing.JLabel cautionLabel;
    public javax.swing.JPanel colorPanel;
    public javax.swing.JTextArea commentBox;
    /**
    * The file chooser to choose a .csv file.
    */
    private javax.swing.JFileChooser csvMapChooser;
    /**
    * The label displays the name of the .csv file selected.
    */
    private javax.swing.JLabel csvName;
    public javax.swing.JTextField departmentCode;
    public javax.swing.JTextField departmentName;
    /**
    * The color chooser to select a new department color.
    */
    private javax.swing.JColorChooser deptColorChooser;
    /**
    * The button for the file menu.
    */
    private javax.swing.JMenu fileButton;
    /**
    * This dropdown box selects a floor to show on spreadsheet display.
    */
    public javax.swing.JComboBox floorDropdown;
    /**
    * The label for the floor selected from the dropdown box.
    */
    private javax.swing.JLabel floorLabel;
    public javax.swing.JTextField floorName;
    /**
    * The button for the help menu.
    */
    private javax.swing.JMenu helpButton;
    /**
    * The button to import the selected .pdf and .csv files.
    */
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    /**
    * This is the panel for the main window.
    */
    private javax.swing.JPanel mainPanel;
    private EzFacMan.MapPanel mapDisplay;
    /**
    * The menu for the main window.
    */
    private javax.swing.JMenuBar menuBar;
    /**
    * The button to modify department colors.
    */
    private javax.swing.JMenuItem modDeptColor;
    /**
    * The file chooser that selects a .pdf.
    */
    private javax.swing.JFileChooser pdfMapChooser;
    /**
    * The label displays name of the .pdf file selected.
    */
    private javax.swing.JLabel pdfName;
    /**
    * The button to exit the program.
    */
    private javax.swing.JMenuItem quitButton;
    /**
    * The button to reset department colors. =
    */
    private javax.swing.JMenuItem resetDeptColors;
    public javax.swing.JTextField roomArea;
    private javax.swing.JLabel roomBuildingName;
    private javax.swing.JLabel roomCampus;
    private javax.swing.JLabel roomFOAPAL;
    private javax.swing.JLabel roomFOAPALName;
    private javax.swing.JLabel roomFloor;
    public javax.swing.JPanel roomInfoPopup;
    public javax.swing.JTextField roomNum;
    private javax.swing.JLabel roomNumber;
    public javax.swing.JFrame roomPopUp;
    public javax.swing.JTextField roomType;
    private javax.swing.JLabel roomTypedes;
    private javax.swing.JButton selectColorButton;
    /**
    * The button for the settings menu.
    */
    private javax.swing.JMenu settingsButton;
    public javax.swing.JButton showMap;
    public javax.swing.JButton updateChange;
    /**
    * The button to open the user manual.
    */
    private javax.swing.JMenuItem userManualButton;
    // End of variables declaration//GEN-END:variables
}
