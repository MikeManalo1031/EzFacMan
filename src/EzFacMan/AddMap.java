/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EzFacMan;

import static EzFacMan.EZFacUI.dBuilding;
import static EzFacMan.EZFacUI.dCampus;
import ParseSVGData.SVGParser;
import databaseTables.building;
import databaseTables.buildingManager;
import databaseTables.campus;
import databaseTables.campusManager;
import databaseTables.floors;
import databaseTables.floorsManager;
import java.awt.Color;
import static java.awt.Color.blue;
import java.awt.Graphics;
import java.io.File;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Ali
 */
public class AddMap extends javax.swing.JFrame {

    /**
     * Creates new form AddMap
     */
    private EzFacMan.MapPanel mapDisplay;
    File selectedFile = null;
    public ArrayList<String> allcampuses = new ArrayList<String>();
    private ArrayList<String> allbuildings = new ArrayList<>();
    private ArrayList<String> allfloors = new ArrayList<String>();
    floors f = floorsManager.displayAllfloors();
    campus c = campusManager.displayAllCampuses();
    building b = buildingManager.displayAllBuildings();

    public AddMap() throws SQLException, ClassNotFoundException {

        initComponents();

        floorDropdown.setEnabled(false);
        buildingDropdown.setEnabled(false);
        allfloors.addAll(f.getAllFloors());
        allcampuses.addAll(c.getAllcampuses());
        allbuildings.addAll(b.getAllbuildings());

        for (String s : allfloors) {
            floorDropdown.addItem(s);
        }

        for (String s : allcampuses) {
            campusDropdown.addItem(s);
        }

        for (String s : allbuildings) {
            buildingDropdown.addItem(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pdfMapChooser = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        campusDropdown = new javax.swing.JComboBox();
        buildingDropdown = new javax.swing.JComboBox();
        floorDropdown = new javax.swing.JComboBox();
        addNewMap = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        importButton = new javax.swing.JButton();
        pdfName = new javax.swing.JLabel();

        pdfMapChooser.removeChoosableFileFilter(pdfMapChooser.getAcceptAllFileFilter());
        FileNameExtensionFilter pdfFilter = new FileNameExtensionFilter("PDF", "pdf");
        pdfMapChooser.addChoosableFileFilter(pdfFilter);
        pdfMapChooser.setAccessory(addNewMap);
        pdfMapChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pdfMapChooserPropertyChange(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(500, 400));

        jLabel1.setText("Campus");

        jLabel2.setText("Building");

        jLabel3.setText("Floor");

        campusDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Item" }));
        campusDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                campusDropdownActionPerformed(evt);
            }
        });

        buildingDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Item" }));
        buildingDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildingDropdownActionPerformed(evt);
            }
        });

        floorDropdown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Item" }));

        addNewMap.setText("Add pdf Map");
        addNewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewMapActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });

        pdfName.setText("jLabel4");
        pdfName.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                pdfNamePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))))
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campusDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buildingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(addNewMap)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pdfName)
                            .addComponent(cancelButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(importButton)
                .addContainerGap(117, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(campusDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(buildingDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                .addComponent(pdfName)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNewMap)
                    .addComponent(cancelButton)
                    .addComponent(importButton))
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campusDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_campusDropdownActionPerformed

        floorDropdown.setEnabled(false);
        dCampus = (String) campusDropdown.getSelectedItem();
        // String sqlString = "'" + dCampus;

        if (dCampus != null) {

            building bb = null;
            try {
                buildingDropdown.removeAllItems();

                bb = buildingManager.display(dCampus);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            allbuildings.removeAll(allbuildings);
            allbuildings.addAll(bb.getAllbuildings());

            for (String s : allbuildings) {
                buildingDropdown.addItem(s);

            }
            buildingDropdown.setEnabled(true);
            floorDropdown.setEnabled(false);

        }

    }//GEN-LAST:event_campusDropdownActionPerformed

    private void addNewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewMapActionPerformed
        JOptionPane.showMessageDialog(null, "Make sure that you Added a spreadsheat corresponds"
                + "to the map", "Information", JOptionPane.INFORMATION_MESSAGE);
        //  System.out.println(i);
        int returnVal1 = pdfMapChooser.showOpenDialog(AddMap.this);

    }//GEN-LAST:event_addNewMapActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        AddMap.this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void pdfNamePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pdfNamePropertyChange

    }//GEN-LAST:event_pdfNamePropertyChange

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        PDFCustomFilter pdfFilter = new PDFCustomFilter();
        if (pdfFilter.accept(selectedFile) != true) {
            JOptionPane.showMessageDialog(null, "The file you selected is not a PDF", "Error!", JOptionPane.OK_OPTION);
        } //CSVCustomFilter csvFilter = new CSVCustomFilter();
        //        File csvCurFile = null;
        //        if (csvFilter.accept(csvCurFile) != true) {
        //            JOptionPane.showMessageDialog(null, "The file you selected is not a CSV", "Error!", JOptionPane.OK_OPTION);
        //        } 
        else {
            floorsManager fm = new floorsManager();
            try {
                fm.insertMap(selectedFile.getPath(), buildingDropdown.getSelectedItem().toString(),
                        floorDropdown.getSelectedItem().toString());
            } catch (SQLException ex) {
                Logger.getLogger(AddMap.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(AddMap.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AddMap.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void pdfMapChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_pdfMapChooserPropertyChange

        if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(evt.getPropertyName())) {
            pdfMapChooser = (JFileChooser) evt.getSource();
            File oldFile = (File) evt.getOldValue();
            File newFile = (File) evt.getNewValue();
            // The selected file should always be the same as newFile
            File curFile = pdfMapChooser.getSelectedFile();
            selectedFile = curFile;
            if(curFile != null){
            pdfName.setText(curFile.getName());
            pdfName.setForeground(blue);
            }
        } else if (JFileChooser.SELECTED_FILES_CHANGED_PROPERTY.equals(
                evt.getPropertyName())) {
            JFileChooser pdfMapChooser = (JFileChooser) evt.getSource();
            File[] oldFiles = (File[]) evt.getOldValue();
            File[] newFiles = (File[]) evt.getNewValue();

            // Get list of selected files
            // The selected files should always be the same as newFiles
            File[] files = pdfMapChooser.getSelectedFiles();
        }
    }//GEN-LAST:event_pdfMapChooserPropertyChange

    private void buildingDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildingDropdownActionPerformed

        dBuilding = (String) buildingDropdown.getSelectedItem();
        if (dBuilding != null) {
            floors ff = null;
            try {
                floorDropdown.removeAllItems();

                ff = floorsManager.display(dBuilding);

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EZFacUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            allfloors.removeAll(allfloors);
            allfloors.addAll(ff.getAllFloors());

            for (String s : allfloors) {
                floorDropdown.addItem(s);

            }

        }
        System.out.println(allfloors.toString());
        floorDropdown.setEnabled(true);
    }//GEN-LAST:event_buildingDropdownActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMap.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AddMap().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AddMap.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(AddMap.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addNewMap;
    private javax.swing.JComboBox buildingDropdown;
    private javax.swing.JComboBox campusDropdown;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox floorDropdown;
    private javax.swing.JButton importButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JFileChooser pdfMapChooser;
    private javax.swing.JLabel pdfName;
    // End of variables declaration//GEN-END:variables
}
